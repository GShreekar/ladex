name: Release Ladex CLI

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: aarch64-apple-darwin
            archive_name_suffix: macos-aarch64
          - os: macos-latest
            target: x86_64-apple-darwin
            archive_name_suffix: macos-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive_name_suffix: linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            archive_name_suffix: linux-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive_name_suffix: windows-x86_64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools for ARM64 Linux
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install zip (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install zip -y

      - name: Build binary
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package the binary
        shell: bash
        run: |
          APP_NAME="ladex"
          VERSION_TAG=${{ github.ref_name }}
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            BINARY_NAME="${APP_NAME}.exe"
            ARCHIVE_NAME="${APP_NAME}-${VERSION_TAG}-${{ matrix.archive_name_suffix }}.zip"
            zip -j $ARCHIVE_NAME "./target/${{ matrix.target }}/release/${BINARY_NAME}"
          else
            BINARY_NAME="${APP_NAME}"
            ARCHIVE_NAME="${APP_NAME}-${VERSION_TAG}-${{ matrix.archive_name_suffix }}.tar.gz"
            tar -czf $ARCHIVE_NAME -C "./target/${{ matrix.target }}/release" $BINARY_NAME
          fi
          echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ${{ env.ARCHIVE_NAME }}

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - run: ls -R ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
